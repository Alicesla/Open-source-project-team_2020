/*
Author：Ally
data：20200925
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
class Solution {
public:

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        //查看vec大小
        int size=postorder.size();
        //如果遍历序列为空则该树不存在
        if (size==0) return NULL;
        int mid_index=0;
        //新建树节点
        TreeNode * root=new TreeNode;
        //看目前根节点数值大小以及查找它在中序遍历中的结果
        int mid=postorder[size-1];
        root->val=mid;
        for(int i=0;i<size;i++){
            if(inorder[i]==mid) mid_index=i;
        }
        //进行遍历
        root->left=bT(inorder,postorder,0,mid_index-1,0,mid_index-1);
        root->right=bT(inorder,postorder,mid_index+1,size-1,mid_index,size-2);
        return root;
    }
    TreeNode* bT(vector<int>& inorder,vector<int>& postorder,int inleft,int inright,int postleft,int postright){
        if (inleft>inright) return NULL;
        TreeNode * root=new TreeNode;
        int mid_1=postorder[postright];
        int mid_index_1;
        root->val=mid_1;
        for (int i=inleft;i<=inright;i++){
            if (inorder[i]==mid_1) mid_index_1=i;
        }
        root->left=bT(inorder,postorder, inleft,mid_index_1-1,postleft,mid_index_1-1-inleft+postleft);
        root->right=bT(inorder,postorder,mid_index_1+1,inright,mid_index_1-inleft+postleft,postright-1);
        return root;
    }
};
