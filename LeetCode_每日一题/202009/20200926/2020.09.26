/*
Author:Ally
data:20200926
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        if(!root)
            return {};
        TreeNode* p = root;
        stack<pair<TreeNode*,int>>s;
        vector<vector<int> >ans;
        vector<int>temp;
        int n = 0;
        TreeNode* r = NULL;                             //r用来标记是否已访问过
        while(p||!s.empty())
        {
            while(p)
            {
                temp.push_back(p->val);
                n += p->val;
                s.push(pair<TreeNode*,int>(p,n));
                p = p->left;
            }
            p = s.top().first;
            n = s.top().second;
            if(n==sum&&!p->left&&!p->right)
                ans.push_back(temp);                     //如果temp数组满足要求，进ans
            if(p->right&&p->right!=r)                    //右孩子不空且未访问过；    
            {
                p = p->right;
            }
            else
            {
                s.pop();
                temp.pop_back();
                r = p;                                  //r标记当前节点已访问
                p = NULL;                               //重置p指针，不然栈会不停地进出同一节结点
            }
        }
        return ans;
    }
};
