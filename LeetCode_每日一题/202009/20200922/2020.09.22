/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int minCameraCover(TreeNode* root) {
        int min_cam=0;//记录最小摄像头数目
        //非递归后序遍历需要两个栈s_1&s_2
        stack<TreeNode *>s_1;
        stack<TreeNode *>s_2;
        TreeNode* p;
        if (root) {
            s_1.push(root);
            root->val=-1;
        }
        else 
            return min_cam;
        if(!root->left &!root->right) return 1;
        while(!s_1.empty()){//得到后续遍历结果
            p=s_1.top();
            p->val=-1;
            s_2.push(p);
            s_1.pop();
            if (p->left) s_1.push(p->left);
            if (p->right) s_1.push(p->right);
        }
        while(!s_2.empty()){
            p=s_2.top();
            s_2.pop();
            int a=-1;
            int b=-1;
            if (p->left||p->right){//获取左右孩子状态值，0表示待监控，1表示孩子是监控，-1表示不需要监控or无孩子节点
                if(p->left) a=p->left->val;
                if(p->right) b=p->right->val;
            }
            int max=a>=b?a:b;
            int min=a>=b?b:a;
            if(max==1&min==0){//有一个孩子要被监控//max=1&min=1左右孩子都有监控，则不需要被监控   max=1&min=-1，有一个孩子是监控，一个孩子不需要监控，则不需要被监控
                p->val=1;//p处安装监控
                min_cam++;
            }
            if(max==0){//有孩子需要被监控
                p->val=1;//安装监控
                min_cam++;
            }
            if(max==-1) p->val=0;//两个孩子都不需要监控or无孩子

            if(s_2.empty()&&p->val==0 ) min_cam++;//判断根节点是不是需要被监控
           // cout<<a<<b<<p->val<<endl;
        }
        return min_cam;
    }
};
