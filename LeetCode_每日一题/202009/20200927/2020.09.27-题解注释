class Solution {
public:
    //寻找从根节点到目标节点的路径
    vector<TreeNode*> findpath(TreeNode* root,TreeNode* target){
        vector<TreeNode*> path;
        TreeNode* node=root;
        //目标节点必然存在于树中，因此不用判断节点是否为空
        while(node != target){
            //将此节点压入TreeNode*类型的path向量中
            path.push_back(node);
            if(target->val < node->val)  node=node->left;
            else node=node->right;
        }
        //此时找到目标节点，将目标节点压入path中
        path.push_back(node);
        //返回path
        return path;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //先找到从根节点到两个目标节点的路径
        vector<TreeNode*> path_p=findpath(root,p);
        vector<TreeNode*> path_q=findpath(root,q);
        //定义存放公共祖先节点的变量
        TreeNode* ancestor;
        for(int i=0;i<path_p.size() && i<path_q.size();i++){
            //若当前节点相同，则看下一个节点是否为公共的祖先节点
            if(path_p[i]==path_q[i]){
                ancestor=path_p[i];
            }
            //当此节点不为公共祖先节点时，跳出循环
            else break;
        }
        //返回此时的ancestor，即为最近公共祖先节点
        return ancestor;
    }
};
