#include<iostream>
using namespace std;

struct Node{   //节点结构 
    int val;
    Node *left, *right;
    Node(){right = NULL; left = NULL;}
    ~Node();
};   

/*
Node* build(Node* root, int val){   //创建二叉排序树  
    if(root == NULL){
        root=new Node();
        root->val = val;
        return root;
    }
    if(val < root->val) root->left = build(root->left, val);
    else if(val > root->val) root->right = build(root->right, val);
    return root;
}
*/

Node* build(Node* root, int val){   //创建一般二叉树 
    if(root == NULL){
        root=new Node();  
        root->val = val;
        return root;
    }
    if(root->left==NULL) root->left = build(root->left, val);
    else  root->right = build(root->right, val);
    return root;
}

void PreOrder(Node *T)   //先序遍历 
{
    if(T!=NULL)
    {
        cout<<T->val<<" ";
        PreOrder(T->left);
        PreOrder(T->right);
    }
}

Node* mergeTrees(Node* t1, Node* t2) {  //合并两棵树 
    if(t1==NULL || t2==NULL){
        return t1?t1:t2;
    }
    else{
        t1->val=t1->val+t2->val;
        t1->left=mergeTrees(t1->left,t2->left);
        t1->right=mergeTrees(t1->right,t2->right);
    }
    return t1;
}
    
int main(){
    Node *root1 = NULL;
    Node *root2 = NULL;
    Node *root3 = NULL;
    int t[] = {1,NULL,6,3,7};
    for(int i = 0; i < (sizeof(t) / sizeof(t[0])); i++) {
        root1 = build(root1, t[i]); 
	  }
	  int u[] = {5,NULL,3,NULL,2,8};
	  for(int j = 0; j < (sizeof(u) / sizeof(u[0])); j++) {
        root2 = build(root2, u[j]); 
	  }
    PreOrder(root1);
    cout<<endl;
    PreOrder(root2);
    cout<<endl;
    root3=mergeTrees(root1,root2);
    PreOrder(root3);
	  return 0;
}
