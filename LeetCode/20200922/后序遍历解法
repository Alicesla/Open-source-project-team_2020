
/*
     Author: litang
     Description: 
     Since: 2020/09/22
            15:39:23
  */

struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution
{
public:
    int res = 0;
    //0表示为被覆盖
    //1表示被覆盖(未安装摄像头)
    //2表示安装了摄像头
    //自底向上的逻辑
    int LRD(TreeNode *root)
    {
        //空结点为已经覆盖状态
        if (!root)
            return 1;
        int l = LRD(root->left);
        int r = LRD(root->right);
        //左右子树有一个没被覆盖,则父节点必须安装摄像头
        if (!l || !r)
        {
            res++;
            return 2;
        }
        //左右子树都被覆盖了,则父节点的状态为未被覆盖
        if (l == 1 && r == 1)
            return 0;
        //左右子树中有一个安装了摄像头, 父节点已经被覆盖
        if (r + l >= 3)
            return 1;
    }
    int minCameraCover(TreeNode *root)
    {
        //若根未被覆盖,则根必须安装摄像头
        if (!LRD(root))
            ++res;
        return res;
    }
};
