/*
author :Ally
data:20200924
*/
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        if(!root) return {};

        int maxCnt = INT_MIN;
        int cnt = 0;    // 保存当前数字的计数
        int pre = -1;   // 保存前一个数字
        vector<int> ans;
        stack<pair<TreeNode*, int>> s;
        s.push(make_pair(root, 0));
        while(!s.empty()){
            TreeNode* curNode = s.top().first;
            int visit = s.top().second;
            s.pop();
            if(visit==0){
                if(curNode->right!=nullptr) s.push(make_pair(curNode->right, 0));
                s.push(make_pair(curNode, 1));
                if(curNode->left!=nullptr) s.push(make_pair(curNode->left, 0));
            }else{
                if(pre!=-1){    // 不是第一个数字
                    if(curNode->val==pre){
                        cnt++;
                        if(cnt>maxCnt){ // 找到了新的众数
                            ans.clear();
                            ans.push_back(curNode->val);
                            maxCnt = cnt;
                        }else if(cnt==maxCnt){  // 找到了出现次数一样的众数
                            ans.push_back(curNode->val);
                        }
                    }else{
                        cnt = 1;
                        if(cnt==maxCnt){    // 防止树中只有两个节点的情况
                            ans.push_back(curNode->val);
                        }
                    }
                }else{
                    cnt = 1;
                    maxCnt = cnt;
                    ans.push_back(curNode->val);    // 防止树中只有一个节点的情况
                }
                pre = curNode->val;
            }
        }
        return ans;
    }
};
