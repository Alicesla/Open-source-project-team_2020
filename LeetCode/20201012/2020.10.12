//一个中序遍历，边遍历边计算，一个遍历到数组里面再计算
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
/*
    int getMinimumDifference(TreeNode* root) {
        //存储二叉树的值并计算.其时间复杂度o(n^2)空间复杂度o(n)
        vector <int >vec;
        preorder(root,vec);
        for (int i=0;i<vec.size();i++){
            cout<<vec[i];
        }
        int res=abs_cha(vec[0],vec[1]);
        for (int i=0;i<vec.size()-1;i++){
            for (int j=i+1;j<vec.size();j++){
                int temp=abs_cha(vec[i],vec[j]);
                if(temp<res)res=temp;
            }
        }
        return res;     
    }
    void preorder(TreeNode * root,vector <int> & vec ){
        if (root){
            vec.push_back(root->val);
            preorder(root->left,vec);
            preorder(root->right,vec);
        }
    }
    int abs_cha(int a,int b){
        if (a>b) return a-b;
        else return b-a;
    }
    */
    int getMinimumDifference(TreeNode *root){
        stack<TreeNode *>s;
        TreeNode *p=root;
        s.push(p);
        int pre=0,curr=0,count=0;
        int temp;
        while(!s.empty()){
            while(p!=NULL&&p->left!=NULL) {
                s.push(p->left); 
                p=p->left;
            }
            p=s.top();
            cout<<p->val;
            s.pop();
            count++;
            if (count==1) {
                pre=p->val;
            }
            else if (count ==2){
                curr=p->val;
                temp=curr-pre;
            }
            else{
                pre=curr;
                curr=p->val;
                if (curr-pre<temp) temp=curr-pre;
            }
            if(p->right){
                s.push(p->right);
            } 
            p=p->right;

        }
        return temp;
    }

};
