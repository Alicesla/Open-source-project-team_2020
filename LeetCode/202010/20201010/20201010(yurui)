/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。
//哈希表

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_map<ListNode*,int> hashmap;
       while(head)
       {
          if(hashmap.count(head)==1)
          return head;
          hashmap[head]=1;
          head=head->next;
       }
       return NULL;
    }
};
o(n),o(n)
//快慢指针法
从相遇点到入环点的距离加上 n-1n−1 圈的环长，恰好等于从链表头部到入环点的距离。

因此，当发现 \textit{slow}slow 与 \textit{fast}fast 相遇时，我们再额外使用一个指针 \textit{ptr}ptr。起始，它指向链表头部；随后，它和 \textit{slow}slow 每次向后移动一个位置。最终，它们会在入环点相遇。


class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
         ListNode* slow=head;
         ListNode* fast=head;
         ListNode* ptr=head;
        if(!head) return NULL;
         do
        {
            if(!fast||!(fast->next)) return NULL;
            else 
            {
                fast=fast->next->next;
                slow=slow->next;
            }
        }while(fast!=slow);//快慢指针相遇点
        while(slow!=ptr)
        {
            slow=slow->next;
            ptr=ptr->next;
        }
        return ptr;
    }
};
o(n)o(1)
