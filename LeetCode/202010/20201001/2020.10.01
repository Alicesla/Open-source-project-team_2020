# define l(x) leaves[x]
class Solution {
public:
    int minimumOperations(string leaves) {
         vector<int> v;

         //处理左或右边有'y'的情况：保证两端是r
         int ssum = 0;
         if(l(0)=='y'){
            l(0)='r';
            ssum++;
         }
         if(l(leaves.length()-1)=='y'){
            l(leaves.length()-1)='r';
            ssum++;
         }
         int num = 0;

         //字符串转换为数组，rrrryyyyrr -> [-4, 4, -2]
         for(int i=0;i<leaves.length();i++){
            if(num<=0&&l(i)=='r')
               num--;
            else if(num>=0&&l(i)=='y')
               num++;
            else{
               v.push_back(num);
               num=0;
               i--;
            }
         }
         v.push_back(num);
         
         //处理全是y或r的情况： rrr/yyy->ryr  
         if(v.size()==1){
             if(v[0]>0)
                return 2+ssum;
             else
                return 1+ssum;
         }
 
         //LCS计算中间部分为y的最长串，得到左右边界l和r
         int m = v[0];
         int sum = 0;
         int b = 0;
         int l = 0;
         int r = 0;
         for(int i=0;i<v.size();i++){
             sum+=v[i];
             if(sum>=m){
                 m = sum;
                 l = b;
                 r = i;
             }
             if(sum<0){
                 sum = 0;
                 b = i+1;
             }

         }
             //l和r之间的 r变y
             for(int i=l;i<=r;i++){
                 if(v[i]<0)
                 ssum-=v[i];
             }
             //l左边的  y变r
             for(int i=0;i<l;i++){
                 if(v[i]>0)
                 ssum+=v[i];
             }
             //r右边的  y变r
             for(int i=r+1;i<v.size();i++){
                 if(v[i]>0)
                 ssum+=v[i];
             }

             return ssum;
    }
};
