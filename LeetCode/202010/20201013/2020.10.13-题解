/*
24. 两两交换链表中的节点
给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
 
示例 1：
输入：head = [1,2,3,4]
输出：[2,1,4,3]

示例 2：
输入：head = []
输出：[]

示例 3：
输入：head = [1]
输出：[1]

 
提示：
链表中节点的数目在范围[0, 100]内
0 <= Node.val <= 100
*/

//使用递推
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        //当当前节点为空节点或当前节点的后继节点为空节点的时候，不用进行交换，直接返回
        if (head == nullptr || head->next == nullptr) 当前节点{
            return head;
        }
        ListNode* newHead = head->next;
        //当前结点的后继节点使用递推
        head->next = swapPairs(newHead->next);
        //当前结点的后继节点的后继节点改为头结点，注意顺序，防止断链
        newHead->next = head;
        return newHead;
    }
};
