class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++){
            vector<vector<int>> temp;
            temp=threesum(nums,i+1,target-nums[i]);
            for(int j=0;j<temp.size();j++){
                temp[j].push_back(nums[i]);
                ans.push_back(temp[j]);
            }
            while(i<nums.size()-1&&nums[i]==nums[i+1]) i++;
        }

        return ans;
    }

    vector<vector<int>> threesum(vector<int>& nums,int start,int target){
        vector<vector<int>> res;
        for(int i=start;i<nums.size();i++){
            vector<vector<int>> temp;
            temp=twosum(nums,i+1,target-nums[i]);
            for(int j=0;j<temp.size();j++){
                temp[j].push_back(nums[i]);
                res.push_back(temp[j]);
            }
            while(i<nums.size()-1&&nums[i]==nums[i+1]) i++;
        }

        return res;
    }

    vector<vector<int>> twosum(vector<int>& nums,int start,int target){
        vector<vector<int>> res;
        int lo=start,hi=nums.size()-1;
        while(lo<hi){
            int tempsum=nums[lo]+nums[hi];
            int left=nums[lo],right=nums[hi];
            if(tempsum<target){
                while(lo<hi&&nums[lo]==left) lo++;
            }
            else if(tempsum>target) {
                while(lo<hi&&nums[hi]==right) hi--;
            }
            else{
                res.push_back({nums[lo],nums[hi]});
                while(lo<hi&&nums[lo]==left) lo++;
                while(lo<hi&&nums[hi]==right) hi--;
            }

        }
        return res;
    }
};


//以下是有bug的，没改出来。。。。，改出来再说吧

/*class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        //可以先找出相加等于target/2的二元组
        //当target为偶数时
        vector<int > v;
        v.push_back(0);
        v.push_back(0);
        vector<int>v_4;
        v_4.push_back(0);
        v_4.push_back(0);
        v_4.push_back(0);
        v_4.push_back(0);
        vector<vector<int>>res;//存放结果
        if (target%2==0){
            int tar=tar/2;
            vector<vector<int >> vec;
            twoSum(nums,vec,v,tar);//vec 存储了二元组 
            for (int i=0;i<vec.size()-1;i++){
                for(int j=i+1;j<vec.size();j++){
                    v_4[0]=vec[i][0];
                    v_4[1]=vec[i][1];
                    v_4[2]=vec[j][0];
                    v_4[3]=vec[j][1];
                    res.push_back(v_4);
                }
            }   
        }
        else{//当target为奇数时
            int tar_1=target/2;
            
            int tar_2=target/2+1;
            cout<<tar_1<<tar_2;
            vector<vector<int >> vec_1;
            vector<vector<int >> vec_2;
            twoSum(nums,vec_1,v,tar_1);
            twoSum(nums,vec_2,v,tar_2);
            for (int i=0;i<vec_1.size();i++){
                for (int j=0;j<vec_2.size();j++){
                    v_4[0]=vec_1[i][0];
                    v_4[1]=vec_1[i][1];
                    v_4[2]=vec_2[j][0];
                    v_4[3]=vec_2[j][1];
                    res.push_back(v_4);
                }
            }
        }
        return res;
    }
    void twoSum(vector<int>& nums,vector<vector<int >>& vec,vector<int>v,int tar){
        for (int i =0;i<nums.size()-1;i++){//查找符合tar的二元组
            for (int j=i+1;j<nums.size();j++){
                if (nums[i]+nums[j]==tar){
                    v[0]=nums[i];
                    v[1]=nums[j];
                    vec.push_back(v);
                }
            }
        }
    }
};*/
