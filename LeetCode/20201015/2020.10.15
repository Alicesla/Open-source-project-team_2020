/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        Node * p;
        queue<Node *> q;
        q.push(root);
        int i=1;
        int count=0;
        while(!q.empty()){
            p=q.front();
            q.pop();
            count ++;
            if (count==i) {
                p->next=NULL;
                count =0;
                i=i*2;
            }
            else {
                Node *post= q.front();
                p->next=post;
            }
            if (p->left) {
                q.push(p->left);
                q.push(p->right);
            }
        }
        return root;
    }
};
